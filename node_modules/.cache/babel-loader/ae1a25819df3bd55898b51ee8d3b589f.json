{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/noemie/Desktop/prowriterating/front/src/components/paraquest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Paraquest() {\n  _s();\n\n  const questions = [{\n    questionText: 'How many main ideas are discussed in this paragraph? See definition of a \"main idea\" above. To distinguish between \"main ideas\" and simply supporting ideas, consider how main ideas are broad; supporting ideas can be subsumed under a broader main idea category. Paragraphs may provide clues such as transitions to indicate separate ideas.',\n    answerOptions: [{\n      answerText: '0'\n    }, {\n      answerText: '1'\n    }, {\n      answerText: '2'\n    }, {\n      answerText: '3'\n    }, {\n      answerText: '4'\n    }, {\n      answerText: '5'\n    }, {\n      answerText: '6'\n    }, {\n      answerText: '7'\n    }, {\n      answerText: '8'\n    }]\n  }, {\n    questionText: 'How well does this paragraph develop from / fit with the thesis statement (if applicable) and prompt?',\n    answerOptions: [{\n      answerText: 'NA'\n    }, {\n      answerText: '1'\n    }, {\n      answerText: '2'\n    }, {\n      answerText: '3'\n    }, {\n      answerText: '4'\n    }]\n  }, {\n    questionText: 'How well does this paragraph connect to/transition from/follow the previous paragraph? Write \"N/A\" if there is only one paragraph in the whole text.',\n    answerOptions: [{\n      answerText: 'NA'\n    }, {\n      answerText: '1'\n    }, {\n      answerText: '2'\n    }, {\n      answerText: '3'\n    }, {\n      answerText: '4'\n    }]\n  }, {\n    questionText: 'How well does this paragraph evidence the claim made in the topic sentence? Write N/A if there is no topic sentence.',\n    answerOptions: [{\n      answerText: 'NA'\n    }, {\n      answerText: '1'\n    }, {\n      answerText: '2'\n    }, {\n      answerText: '3'\n    }, {\n      answerText: '4'\n    }]\n  }, {\n    questionText: 'On a scale of 1 to 4, how strong is this paragraph\\'s topic sentence? Write N/A if there is no topic sentence.',\n    answerOptions: [{\n      answerText: 'NA'\n    }, {\n      answerText: '1'\n    }, {\n      answerText: '2'\n    }, {\n      answerText: '3'\n    }, {\n      answerText: '4'\n    }]\n  }];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n\n  const handleAnswerOptionClick = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    event.preventDefault();\n    const answer = event.value;\n    axios.post('http://localhost:8080/rating', answer);\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-count\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Question \", currentQuestion + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this), \"/\", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-text\",\n        children: questions[currentQuestion].questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-section\",\n      children: questions[currentQuestion].answerOptions.map(answerOption => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAnswerOptionClick,\n        children: answerOption.answerText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Paraquest, \"9OM438k1WhEIHDwFF7YsuyU6VEk=\");\n\n_c = Paraquest;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paraquest\");","map":{"version":3,"sources":["/mnt/c/Users/noemie/Desktop/prowriterating/front/src/components/paraquest.js"],"names":["React","useState","axios","Paraquest","questions","questionText","answerOptions","answerText","currentQuestion","setCurrentQuestion","handleAnswerOptionClick","event","name","value","target","preventDefault","answer","post","nextQuestion","length","map","answerOption"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport axios from \"axios\";\n\nexport default function Paraquest() {\n\nconst questions = [\n    {\n        questionText: 'How many main ideas are discussed in this paragraph? See definition of a \"main idea\" above. To distinguish between \"main ideas\" and simply supporting ideas, consider how main ideas are broad; supporting ideas can be subsumed under a broader main idea category. Paragraphs may provide clues such as transitions to indicate separate ideas.',\n        answerOptions: [\n            { answerText: '0' },\n            { answerText: '1' },\n            { answerText: '2' },\n            { answerText: '3' },\n            { answerText: '4' },\n            { answerText: '5' },\n            { answerText: '6' },\n            { answerText: '7' },\n            { answerText: '8' },\n\n\n        ],\n    },\n    {\n        questionText: 'How well does this paragraph develop from / fit with the thesis statement (if applicable) and prompt?',\n        answerOptions: [\n            { answerText: 'NA'},\n            { answerText: '1'},\n            { answerText: '2'},\n            { answerText: '3'},\n            { answerText: '4'},\n        ],\n    },\n    {\n        questionText: 'How well does this paragraph connect to/transition from/follow the previous paragraph? Write \"N/A\" if there is only one paragraph in the whole text.',\n        answerOptions: [\n            { answerText: 'NA'},\n            { answerText: '1'},\n            { answerText: '2'},\n            { answerText: '3'},\n            { answerText: '4'},\n        ],\n    },\n    {\n        questionText: 'How well does this paragraph evidence the claim made in the topic sentence? Write N/A if there is no topic sentence.',\n        answerOptions: [\n            { answerText: 'NA'},\n            { answerText: '1'},\n            { answerText: '2'},\n            { answerText: '3'},\n            { answerText: '4'},\n        ],\n    },\n    {\n        questionText: 'On a scale of 1 to 4, how strong is this paragraph\\'s topic sentence? Write N/A if there is no topic sentence.',\n        answerOptions: [\n            { answerText: 'NA'},\n            { answerText: '1'},\n            { answerText: '2'},\n            { answerText: '3'},\n            { answerText: '4'},\n        ],\n    },\n];\n\nconst [currentQuestion, setCurrentQuestion] = useState(0);\n\nconst handleAnswerOptionClick = (event) => {\n    const {name, value} = event.target;\n    event.preventDefault();\n    const answer = event.value;\n    axios.post('http://localhost:8080/rating', answer)\n    \n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n        setCurrentQuestion(nextQuestion);\n    }\n};\n\nreturn (\n    <div className='app'>\n                <div className='question-section'>\n                    <div className='question-count'>\n                        <span>Question {currentQuestion + 1}</span>/{questions.length}\n                    </div>\n                    <div className='question-text'>{questions[currentQuestion].questionText}</div>\n                </div>\n                <div className='answer-section'>\n                    {questions[currentQuestion].answerOptions.map((answerOption) => (\n                        <button onClick={() => handleAnswerOptionClick}>{answerOption.answerText}</button>\n                    ))}\n                </div>\n        )\n    </div>\n);\n\n};"]},"metadata":{},"sourceType":"module"}