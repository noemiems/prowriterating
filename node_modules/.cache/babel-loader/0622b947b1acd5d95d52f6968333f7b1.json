{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\"use strict\";\n\nimport { keys, objectTypes } from \"./constants\";\nimport { getterForProperty, createMethods, createMethod } from \"./util\";\nimport { promisify } from \"../utils\";\nexport default class User {\n  logOut() {\n    return promisify(cb => this._logOut(cb));\n  }\n\n}\ncreateMethods(User.prototype, objectTypes.USER, [\"_logOut\", \"_sessionForOnDiskPath\", \"_deleteUser\", \"_linkCredentials\", \"_callFunction\", \"_pushRegister\", \"_pushDeregister\", \"_makeStreamingRequest\" // \"_newWatchStream\", // TODO expose WatchStream type via RN debug API\n]);\nObject.defineProperties(User.prototype, {\n  id: {\n    get: getterForProperty(\"id\")\n  },\n  accessToken: {\n    get: getterForProperty(\"accessToken\")\n  },\n  refreshToken: {\n    get: getterForProperty(\"refreshToken\")\n  },\n  profile: {\n    get: getterForProperty(\"profile\")\n  },\n  identities: {\n    get: getterForProperty(\"identities\")\n  },\n  providerType: {\n    get: getterForProperty(\"providerType\")\n  },\n  isLoggedIn: {\n    get: getterForProperty(\"isLoggedIn\")\n  },\n  state: {\n    get: getterForProperty(\"state\")\n  },\n  customData: {\n    get: getterForProperty(\"customData\")\n  },\n  apiKeys: {\n    get: getterForProperty(\"apiKeys\")\n  },\n  deviceId: {\n    get: getterForProperty(\"deviceId\")\n  }\n});\nexport function createUser(realmId, info) {\n  const userProxy = Object.create(User.prototype); // FIXME: This is currently necessary because util/createMethod expects\n  // the realm id to be present on any object that is used over rpc\n\n  userProxy[keys.realm] = \"(User object)\";\n  userProxy[keys.id] = info.id;\n  userProxy[keys.type] = objectTypes.USER;\n  return userProxy;\n}","map":{"version":3,"sources":["/mnt/c/Users/noemie/Desktop/prowriterating/front/node_modules/realm/lib/browser/user.js"],"names":["keys","objectTypes","getterForProperty","createMethods","createMethod","promisify","User","logOut","cb","_logOut","prototype","USER","Object","defineProperties","id","get","accessToken","refreshToken","profile","identities","providerType","isLoggedIn","state","customData","apiKeys","deviceId","createUser","realmId","info","userProxy","create","realm","type"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASA,IAAT,EAAeC,WAAf,QAAkC,aAAlC;AACA,SAASC,iBAAT,EAA4BC,aAA5B,EAA2CC,YAA3C,QAA+D,QAA/D;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,eAAe,MAAMC,IAAN,CAAW;AACtBC,EAAAA,MAAM,GAAG;AACL,WAAOF,SAAS,CAACG,EAAE,IAAI,KAAKC,OAAL,CAAaD,EAAb,CAAP,CAAhB;AACH;;AAHqB;AAM1BL,aAAa,CAACG,IAAI,CAACI,SAAN,EAAiBT,WAAW,CAACU,IAA7B,EAAmC,CAC5C,SAD4C,EAE5C,uBAF4C,EAG5C,aAH4C,EAI5C,kBAJ4C,EAK5C,eAL4C,EAM5C,eAN4C,EAO5C,iBAP4C,EAQ5C,uBAR4C,CAS5C;AAT4C,CAAnC,CAAb;AAYAC,MAAM,CAACC,gBAAP,CAAwBP,IAAI,CAACI,SAA7B,EAAwC;AACpCI,EAAAA,EAAE,EAAE;AAAEC,IAAAA,GAAG,EAAEb,iBAAiB,CAAC,IAAD;AAAxB,GADgC;AAEpCc,EAAAA,WAAW,EAAE;AAAED,IAAAA,GAAG,EAAEb,iBAAiB,CAAC,aAAD;AAAxB,GAFuB;AAGpCe,EAAAA,YAAY,EAAE;AAAEF,IAAAA,GAAG,EAAEb,iBAAiB,CAAC,cAAD;AAAxB,GAHsB;AAIpCgB,EAAAA,OAAO,EAAE;AAAEH,IAAAA,GAAG,EAAEb,iBAAiB,CAAC,SAAD;AAAxB,GAJ2B;AAKpCiB,EAAAA,UAAU,EAAE;AAAEJ,IAAAA,GAAG,EAAEb,iBAAiB,CAAC,YAAD;AAAxB,GALwB;AAMpCkB,EAAAA,YAAY,EAAE;AAAEL,IAAAA,GAAG,EAAEb,iBAAiB,CAAC,cAAD;AAAxB,GANsB;AAOpCmB,EAAAA,UAAU,EAAE;AAAEN,IAAAA,GAAG,EAAEb,iBAAiB,CAAC,YAAD;AAAxB,GAPwB;AAQpCoB,EAAAA,KAAK,EAAE;AAAEP,IAAAA,GAAG,EAAEb,iBAAiB,CAAC,OAAD;AAAxB,GAR6B;AASpCqB,EAAAA,UAAU,EAAE;AAAER,IAAAA,GAAG,EAAEb,iBAAiB,CAAC,YAAD;AAAxB,GATwB;AAUpCsB,EAAAA,OAAO,EAAE;AAAET,IAAAA,GAAG,EAAEb,iBAAiB,CAAC,SAAD;AAAxB,GAV2B;AAWpCuB,EAAAA,QAAQ,EAAE;AAAEV,IAAAA,GAAG,EAAEb,iBAAiB,CAAC,UAAD;AAAxB;AAX0B,CAAxC;AAcA,OAAO,SAASwB,UAAT,CAAoBC,OAApB,EAA6BC,IAA7B,EAAmC;AACtC,QAAMC,SAAS,GAAGjB,MAAM,CAACkB,MAAP,CAAcxB,IAAI,CAACI,SAAnB,CAAlB,CADsC,CAGtC;AACA;;AACAmB,EAAAA,SAAS,CAAC7B,IAAI,CAAC+B,KAAN,CAAT,GAAwB,eAAxB;AACAF,EAAAA,SAAS,CAAC7B,IAAI,CAACc,EAAN,CAAT,GAAqBc,IAAI,CAACd,EAA1B;AACAe,EAAAA,SAAS,CAAC7B,IAAI,CAACgC,IAAN,CAAT,GAAuB/B,WAAW,CAACU,IAAnC;AAEA,SAAOkB,SAAP;AACH","sourcesContent":["\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\"use strict\";\n\nimport { keys, objectTypes } from \"./constants\";\nimport { getterForProperty, createMethods, createMethod } from \"./util\";\nimport { promisify } from \"../utils\";\n\nexport default class User {\n    logOut() {\n        return promisify(cb => this._logOut(cb));\n    }\n}\n\ncreateMethods(User.prototype, objectTypes.USER, [\n    \"_logOut\",\n    \"_sessionForOnDiskPath\",\n    \"_deleteUser\",\n    \"_linkCredentials\",\n    \"_callFunction\",\n    \"_pushRegister\",\n    \"_pushDeregister\",\n    \"_makeStreamingRequest\",\n    // \"_newWatchStream\", // TODO expose WatchStream type via RN debug API\n]);\n\nObject.defineProperties(User.prototype, {\n    id: { get: getterForProperty(\"id\") },\n    accessToken: { get: getterForProperty(\"accessToken\") },\n    refreshToken: { get: getterForProperty(\"refreshToken\") },\n    profile: { get: getterForProperty(\"profile\") },\n    identities: { get: getterForProperty(\"identities\") },\n    providerType: { get: getterForProperty(\"providerType\") },\n    isLoggedIn: { get: getterForProperty(\"isLoggedIn\") },\n    state: { get: getterForProperty(\"state\") },\n    customData: { get: getterForProperty(\"customData\") },\n    apiKeys: { get: getterForProperty(\"apiKeys\") },\n    deviceId: { get: getterForProperty(\"deviceId\") },\n});\n\nexport function createUser(realmId, info) {\n    const userProxy = Object.create(User.prototype);\n\n    // FIXME: This is currently necessary because util/createMethod expects\n    // the realm id to be present on any object that is used over rpc\n    userProxy[keys.realm] = \"(User object)\";\n    userProxy[keys.id] = info.id;\n    userProxy[keys.type] = objectTypes.USER;\n\n    return userProxy;\n}\n"]},"metadata":{},"sourceType":"module"}