{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/noemie/Desktop/prowriterating/front/src/components/dropdown.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dropdown extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch('http://localhost:8080/api/getData').then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = message => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post('http://localhost:8080/api/putData', {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    this.deleteFromDB = idTodelete => {\n      parseInt(idTodelete);\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id === idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete('http://localhost:8080/api/deleteData', {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      parseInt(idToUpdate);\n      this.state.data.forEach(dat => {\n        if (dat.id === idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post('http://localhost:8080/api/updateData', {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 2000000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // option 9:\n  //    getOption(){\n  //        var select = document.getElementById(\"dynamic-select\");\n  //        console.log(select);\n  //        if(document.getElementById(\"dynamic-select\").options.length > 0) {\n  //            var option = document.getElementById(\"dynamic-select\").options[document.getElementById(\"dynamic-select\").selectedIndex];\n  //            alert(\"Text: \" + option.text + \"\\nValue: \" + option.value);\n  //        } else {\n  //            window.alert(\"Select box is empty\");\n  //        }\n  //    }\n  addOption() {\n    var inputElemAdd = document.getElementsByTagName('select');\n    var selectBox = document.getElementById(\"dynamic-select\");\n    alert(\"Current len=\" + Object.keys(inputElemAdd));\n    alert(\"ID props=\" + Object.keys(selectBox)); // returns 3 props\n\n    alert(\"ID props 2=\" + Object.keys(selectBox[2])); // returns 3rd array element (index 2)\n    //alert(\"ID props 3 error=\"+Object.keys(selectBox[3])); // returns 3 props\n\n    alert(\"label=\" + selectBox[2].label); // returns 3rd array element (index 2)\n\n    selectBox[0].label = \"Wrote 0\";\n    selectBox[2].label = \"Wrote 2\";\n    selectBox[3] = new Option('hi, added last label', 'id0', false, false); // add option\n  }\n\n  removeOption() {\n    var inputElem = document.getElementsByTagName('select');\n\n    for (var i = 0; i < inputElem.length; i++) {\n      inputElem[i].options[inputElem[i].selectedIndex] = null; // remove option\n    }\n  } //    \n  //    removeAllOptions(){\n  //        var select = document.getElementById(\"dynamic-select\");\n  //        select.options.length = 0;\n  //    }\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n\n\n  render() {\n    const {\n      data\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            padding: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: 'gray'\n            },\n            children: \" id: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this), \" \", dat.id, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 69\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: 'gray'\n            },\n            children: \" data: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this), dat.message]\n        }, data.message, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: e => this.setState({\n            message: e.target.value\n          }),\n          placeholder: \"add something in the database\",\n          style: {\n            width: '200px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.putDataToDB(this.state.message),\n          children: \"ADD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          style: {\n            width: '200px'\n          },\n          onChange: e => this.setState({\n            idToDelete: e.target.value\n          }),\n          placeholder: \"put id of item to delete here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.deleteFromDB(this.state.idToDelete),\n          children: \"DELETE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          style: {\n            width: '200px'\n          },\n          onChange: e => this.setState({\n            idToUpdate: e.target.value\n          }),\n          placeholder: \"id of item to update here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          style: {\n            width: '200px'\n          },\n          onChange: e => this.setState({\n            updateToApply: e.target.value\n          }),\n          placeholder: \"put new value of the item here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.updateDB(this.state.idToUpdate, this.state.updateToApply),\n          children: \"UPDATE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 7\n        }, this), \"// Source: https://memorynotfound.com/dynamically-add-remove-options-select-javascript\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 92\n        }, this), \"-->\", /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"dynamic-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1\",\n            children: \"one\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"2\",\n            children: \"two\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3\",\n            children: \"three\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.addOption,\n          children: \"add item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 5\n        }, this), \" // remove the brackets to make it happen at onclick\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          class: \"inputs\",\n          type: \"submit\",\n          value: \"Hello\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Dropdown;","map":{"version":3,"sources":["/mnt/c/Users/noemie/Desktop/prowriterating/front/src/components/dropdown.js"],"names":["React","ReactDOM","axios","Dropdown","Component","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","addOption","inputElemAdd","document","getElementsByTagName","selectBox","getElementById","alert","Object","keys","label","Option","removeOption","inputElem","i","length","options","selectedIndex","render","padding","color","e","target","value","width"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from 'axios';\n\nclass Dropdown extends React.Component {\n // initialize our state\n state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n};\n\n// when component mounts, first thing it does is fetch all existing data in our db\n// then we incorporate a polling logic so that we can easily see if our db has\n// changed and implement those changes into our UI\ncomponentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n        let interval = setInterval(this.getDataFromDb, 2000000);\n        this.setState({ intervalIsSet: interval });\n    }\n}\n\n// never let a process live forever\n// always kill a process everytime we are done using it\ncomponentWillUnmount() {\n    if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({ intervalIsSet: null });\n    }\n}\n\n\n// our first get method that uses our backend api to\n// fetch data from our data base\ngetDataFromDb = () => {\n    fetch('http://localhost:8080/api/getData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n};\n\n// our put method that uses our backend api\n// to create new query into our data base\nputDataToDB = (message) => {\n    let currentIds = this.state.data.map((data) => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n    }\n    \n    axios.post('http://localhost:8080/api/putData', {\n        id: idToBeAdded,\n        message: message,\n    });\n};\n\n// our delete method that uses our backend api\n// to remove existing database information\ndeleteFromDB = (idTodelete) => {\n    parseInt(idTodelete);\n    let objIdToDelete = null;\n    this.state.data.forEach((dat) => {\n        if (dat.id === idTodelete) {\n            objIdToDelete = dat._id;\n        }\n    });\n    \n    axios.delete('http://localhost:8080/api/deleteData', {\n        data: {\n            id: objIdToDelete,\n        },\n    });\n};\n\n// our update method that uses our backend api\n// to overwrite existing data base information\nupdateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    this.state.data.forEach((dat) => {\n        if (dat.id === idToUpdate) {\n            objIdToUpdate = dat._id;\n        }\n    });\n    \n    axios.post('http://localhost:8080/api/updateData', {\n        id: objIdToUpdate,\n        update: { message: updateToApply },\n    });\n};\n\n// option 9:\n//    getOption(){\n//        var select = document.getElementById(\"dynamic-select\");\n//        console.log(select);\n//        if(document.getElementById(\"dynamic-select\").options.length > 0) {\n//            var option = document.getElementById(\"dynamic-select\").options[document.getElementById(\"dynamic-select\").selectedIndex];\n//            alert(\"Text: \" + option.text + \"\\nValue: \" + option.value);\n//        } else {\n//            window.alert(\"Select box is empty\");\n//        }\n//    }\n\naddOption(){\n    var inputElemAdd = document.getElementsByTagName('select');\n    var selectBox = document.getElementById(\"dynamic-select\");\n    alert(\"Current len=\"+Object.keys(inputElemAdd));\n    alert(\"ID props=\"+Object.keys(selectBox)); // returns 3 props\n    alert(\"ID props 2=\"+Object.keys(selectBox[2])); // returns 3rd array element (index 2)\n    //alert(\"ID props 3 error=\"+Object.keys(selectBox[3])); // returns 3 props\n    alert(\"label=\"+ selectBox[2].label); // returns 3rd array element (index 2)\n    \n    selectBox[0].label = \"Wrote 0\";\n    selectBox[2].label = \"Wrote 2\";\n    selectBox[3] = new Option('hi, added last label', 'id0',false,false); // add option\n}\n\nremoveOption(){\n    var inputElem = document.getElementsByTagName('select');\n    for(var i = 0; i < inputElem.length; i++) {\n           inputElem[i].options[inputElem[i].selectedIndex] = null; // remove option\n    }\n}\n//    \n//    removeAllOptions(){\n//        var select = document.getElementById(\"dynamic-select\");\n//        select.options.length = 0;\n//    }\n\n// here is our UI\n// it is easy to understand their functions when you\n// see them render into our screen\nrender() {\nconst { data } = this.state;\nreturn (\n  <div>\n    <ul>\n      {data.length <= 0\n        ? 'NO DB ENTRIES YET'\n        : data.map((dat) => (\n            <li style={{ padding: '10px' }} key={data.message}>\n              <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n              <span style={{ color: 'gray' }}> data: </span>\n              {dat.message}\n            </li>\n          ))}\n    </ul>\n    <div style={{ padding: '10px' }}>\n      <input\n        type=\"text\"\n        onChange={(e) => this.setState({ message: e.target.value })}\n        placeholder=\"add something in the database\"\n        style={{ width: '200px' }}\n      />\n      <button onClick={() => this.putDataToDB(this.state.message)}>\n        ADD\n      </button>\n    </div>\n    <div style={{ padding: '10px' }}>\n      <input\n        type=\"text\"\n        style={{ width: '200px' }}\n        onChange={(e) => this.setState({ idToDelete: e.target.value })}\n        placeholder=\"put id of item to delete here\"\n      />\n      <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n        DELETE\n      </button>\n    </div>\n    <div style={{ padding: '10px' }}>\n      <input\n        type=\"text\"\n        style={{ width: '200px' }}\n        onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n        placeholder=\"id of item to update here\"\n      />\n      <input\n        type=\"text\"\n        style={{ width: '200px' }}\n        onChange={(e) => this.setState({ updateToApply: e.target.value })}\n        placeholder=\"put new value of the item here\"\n      />\n      <button\n        onClick={() =>\n          this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n        }\n      >\n        UPDATE\n      </button>\n      \n\n     // Source: https://memorynotfound.com/dynamically-add-remove-options-select-javascript<br></br>-->\n    <select id=\"dynamic-select\">\n            <option value=\"1\">one</option>\n            <option value=\"2\">two</option>\n            <option value=\"3\">three</option>\n    </select>\n\n    {/*<button onClick={this.getOption()}>get item</button>*/}\n    <button onClick={this.addOption}>add item</button> // remove the brackets to make it happen at onclick\n    {/*<button type=\"button\" onClick={this.addOption}>Go</button>\n    <button onClick={this.removeOption()}>remove item</button>\n    <button onClick={this.removeAllOptions}>remove all</button>*/}\n    \n    \n    <br></br>\n    {/*//option 10\n    // source: https://stackoverflow.com/questions/27834226/add-event-listener-to-collection-of-html-elements*/}\n    <input class=\"inputs\" type=\"submit\" value=\"Hello\" />\n    \n            \n    </div>\n  </div>\n);\n}\n}\n\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}