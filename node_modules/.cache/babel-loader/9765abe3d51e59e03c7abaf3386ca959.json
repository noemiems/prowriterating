{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/noemie/Desktop/prowriterating/front/src/components/dropdown.js\";\nimport React, { useEffect, useState, Component } from 'react';\nimport Select from 'react-select';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Db = require('mongodb').Db,\n      MongoClient = require('mongodb').MongoClient,\n      Server = require('mongodb').Server,\n      ReplSetServers = require('mongodb').ReplSetServers,\n      ObjectID = require('mongodb').ObjectID,\n      Binary = require('mongodb').Binary,\n      GridStore = require('mongodb').GridStore,\n      Grid = require('mongodb').Grid,\n      Code = require('mongodb').Code,\n      BSON = require('mongodb').pure().BSON,\n      assert = require('assert');\n\nvar db = new Db('test', new Server('localhost', 27017)); // Establish connection to db\n\ndb.open(function (err, db) {\n  // Create a collection we want to drop later\n  db.createCollection('simple_query', function (err, collection) {\n    assert.equal(null, err); // Insert a bunch of documents for the testing\n\n    collection.insert([{\n      a: 1\n    }, {\n      a: 2\n    }, {\n      a: 3\n    }], {\n      w: 1\n    }, function (err, result) {\n      assert.equal(null, err); // Peform a simple find and return all the documents\n\n      collection.find().toArray(function (err, docs) {\n        assert.equal(null, err);\n        assert.equal(3, docs.length);\n        db.close();\n      });\n    });\n  });\n});\nconst textTitles = [{\n  label: \"Apple\",\n  value: 1\n}, {\n  label: \"Facebook\",\n  value: 2\n}, {\n  label: \"Netflix\",\n  value: 3\n}, {\n  label: \"Tesla\",\n  value: 4\n}, {\n  label: \"Amazon\",\n  value: 5\n}, {\n  label: \"Alphabet\",\n  value: 6\n}];\n\nconst Dropdown = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"container\",\n  style: {\n    marginTop: '5%'\n  },\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-3\",\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        options: textTitles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 54,\n  columnNumber: 5\n}, this);\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["/mnt/c/Users/noemie/Desktop/prowriterating/front/src/components/dropdown.js"],"names":["React","useEffect","useState","Component","Select","Db","require","MongoClient","Server","ReplSetServers","ObjectID","Binary","GridStore","Grid","Code","BSON","pure","assert","db","open","err","createCollection","collection","equal","insert","a","w","result","find","toArray","docs","length","close","textTitles","label","value","Dropdown","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Component } from 'react';\nimport Select from 'react-select';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Db = require('mongodb').Db,\nMongoClient = require('mongodb').MongoClient,\nServer = require('mongodb').Server,\nReplSetServers = require('mongodb').ReplSetServers,\nObjectID = require('mongodb').ObjectID,\nBinary = require('mongodb').Binary,\nGridStore = require('mongodb').GridStore,\nGrid = require('mongodb').Grid,\nCode = require('mongodb').Code,\nBSON = require('mongodb').pure().BSON,\nassert = require('assert');\n\nvar db = new Db('test', new Server('localhost', 27017));\n// Establish connection to db\ndb.open(function(err, db) {\n\n  // Create a collection we want to drop later\n  db.createCollection('simple_query', function(err, collection) {\n    assert.equal(null, err);\n\n    // Insert a bunch of documents for the testing\n    collection.insert([{a:1}, {a:2}, {a:3}], {w:1}, function(err, result) {\n      assert.equal(null, err);\n\n      // Peform a simple find and return all the documents\n      collection.find().toArray(function(err, docs) {\n        assert.equal(null, err);\n        assert.equal(3, docs.length);\n\n        db.close();\n      });\n    });\n  });\n});\n\n\n\n\nconst textTitles = [\n    { label: \"Apple\", value: 1 },\n    { label: \"Facebook\", value: 2 },\n    { label: \"Netflix\", value: 3 },\n    { label: \"Tesla\", value: 4 },\n    { label: \"Amazon\", value: 5 },\n    { label: \"Alphabet\", value: 6 },\n      ];\n      \n\nconst Dropdown = () => (\n    <div className=\"container\" style={{marginTop:'5%'}}>\n    <div className=\"row\">\n    <div className=\"col-md-3\">\n        <Select options={ textTitles } />\n    </div>\n    </div>\n    </div>\n      );\n\n\nexport default Dropdown;\n\n"]},"metadata":{},"sourceType":"module"}